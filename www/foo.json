{
  "../src/Accordion.js": {
    "description": "",
    "methods": []
  },
  "../src/Alert.js": {
    "description": "",
    "methods": [],
    "props": {
      "onDismiss": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "closeLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'Close alert'",
          "computed": false
        }
      }
    }
  },
  "../src/Badge.js": {
    "description": "",
    "methods": [
      {
        "name": "hasContent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "children",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "pullRight": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "../src/Breadcrumb.js": {
    "description": "",
    "methods": []
  },
  "../src/BreadcrumbItem.js": {
    "description": "",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, renders `span` instead of `a`",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`href` attribute for the inner `a` element"
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "`title` attribute for the inner `a` element"
      },
      "target": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`target` attribute for the inner `a` element"
      }
    }
  },
  "../src/Button.js": {
    "description": "",
    "methods": [
      {
        "name": "renderAnchor",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "elementProps",
            "type": null
          },
          {
            "name": "className",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderButton",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ componentClass, ...elementProps }",
            "type": null
          },
          {
            "name": "className",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "block": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": ""
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'button'",
              "computed": false
            },
            {
              "value": "'reset'",
              "computed": false
            },
            {
              "value": "'submit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines HTML button type attribute\n@defaultValue 'button'"
      }
    }
  },
  "../src/ButtonGroup.js": {
    "description": "",
    "methods": [],
    "props": {
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "justified": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "block": {
        "type": {
          "name": "custom",
          "raw": "all(\n  PropTypes.bool,\n  ({ block, vertical }) => (\n    block && !vertical ?\n      new Error('`block` requires `vertical` to be set to have any effect') :\n      null\n  ),\n)"
        },
        "required": false,
        "description": "Display block buttons; only useful when used with the \"vertical\" prop.\n@type {bool}",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "../src/ButtonToolbar.js": {
    "description": "",
    "methods": []
  },
  "../src/Carousel.js": {
    "description": "",
    "methods": [
      {
        "name": "handleMouseOver",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleMouseOut",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handlePrev",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNext",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemAnimateOutEnd",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getActiveIndex",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getDirection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prevIndex",
            "type": null
          },
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "select",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          },
          {
            "name": "e",
            "type": null
          },
          {
            "name": "direction",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "waitForNext",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "pause",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "play",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderIndicators",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "children",
            "type": null
          },
          {
            "name": "activeIndex",
            "type": null
          },
          {
            "name": "bsProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderControls",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "properties",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "slide": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "indicators": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "interval": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "5000",
          "computed": false
        }
      },
      "controls": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "pauseOnHover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "wrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the active item changes.\n\n```js\n(eventKey: any) => any | (eventKey: any, event: Object) => any\n```\n\nIf this callback takes two or more arguments, the second argument will\nbe a persisted event object with `direction` set to the direction of the\ntransition."
      },
      "onSlideEnd": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "activeIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "defaultActiveIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'prev'",
              "computed": false
            },
            {
              "value": "'next'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "prevIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "<Glyphicon glyph=\"chevron-left\" />",
          "computed": false
        }
      },
      "prevLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label shown to screen readers only, can be used to show the previous element\nin the carousel.\nSet to null to deactivate.",
        "defaultValue": {
          "value": "'Previous'",
          "computed": false
        }
      },
      "nextIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "<Glyphicon glyph=\"chevron-right\" />",
          "computed": false
        }
      },
      "nextLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label shown to screen readers only, can be used to show the next element\nin the carousel.\nSet to null to deactivate.",
        "defaultValue": {
          "value": "'Next'",
          "computed": false
        }
      }
    }
  },
  "../src/CarouselCaption.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "../src/CarouselItem.js": {
    "description": "",
    "methods": [
      {
        "name": "handleAnimateOutEnd",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "startAnimation",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'prev'",
              "computed": false
            },
            {
              "value": "'next'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "onAnimateOutEnd": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "animateIn": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "animateOut": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/Checkbox.js": {
    "description": "",
    "methods": [],
    "props": {
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "validationState": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "null",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Only valid if `inline` is not set."
      },
      "inputRef": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Attaches a ref to the `<input>` element. Only functions can be used here.\n\n```js\n<Checkbox inputRef={ref => { this.input = ref; }} />\n```"
      }
    }
  },
  "../src/Clearfix.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "visibleXsBlock": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply clearfix\n\non Extra small devices Phones\n\nadds class `visible-xs-block`"
      },
      "visibleSmBlock": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply clearfix\n\non Small devices Tablets\n\nadds class `visible-sm-block`"
      },
      "visibleMdBlock": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply clearfix\n\non Medium devices Desktops\n\nadds class `visible-md-block`"
      },
      "visibleLgBlock": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply clearfix\n\non Large devices Desktops\n\nadds class `visible-lg-block`"
      }
    }
  },
  "../src/CloseButton.js": {
    "description": "",
    "methods": [],
    "props": {
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/Col.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "xs": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of columns you wish to span\n\nfor Extra small devices Phones (<768px)\n\nclass-prefix `col-xs-`"
      },
      "sm": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of columns you wish to span\n\nfor Small devices Tablets (≥768px)\n\nclass-prefix `col-sm-`"
      },
      "md": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of columns you wish to span\n\nfor Medium devices Desktops (≥992px)\n\nclass-prefix `col-md-`"
      },
      "lg": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of columns you wish to span\n\nfor Large devices Desktops (≥1200px)\n\nclass-prefix `col-lg-`"
      },
      "xsHidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hide column\n\non Extra small devices Phones\n\nadds class `hidden-xs`"
      },
      "smHidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hide column\n\non Small devices Tablets\n\nadds class `hidden-sm`"
      },
      "mdHidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hide column\n\non Medium devices Desktops\n\nadds class `hidden-md`"
      },
      "lgHidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hide column\n\non Large devices Desktops\n\nadds class `hidden-lg`"
      },
      "xsOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Move columns to the right\n\nfor Extra small devices Phones\n\nclass-prefix `col-xs-offset-`"
      },
      "smOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Move columns to the right\n\nfor Small devices Tablets\n\nclass-prefix `col-sm-offset-`"
      },
      "mdOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Move columns to the right\n\nfor Medium devices Desktops\n\nclass-prefix `col-md-offset-`"
      },
      "lgOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Move columns to the right\n\nfor Large devices Desktops\n\nclass-prefix `col-lg-offset-`"
      },
      "xsPush": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Change the order of grid columns to the right\n\nfor Extra small devices Phones\n\nclass-prefix `col-xs-push-`"
      },
      "smPush": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Change the order of grid columns to the right\n\nfor Small devices Tablets\n\nclass-prefix `col-sm-push-`"
      },
      "mdPush": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Change the order of grid columns to the right\n\nfor Medium devices Desktops\n\nclass-prefix `col-md-push-`"
      },
      "lgPush": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Change the order of grid columns to the right\n\nfor Large devices Desktops\n\nclass-prefix `col-lg-push-`"
      },
      "xsPull": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Change the order of grid columns to the left\n\nfor Extra small devices Phones\n\nclass-prefix `col-xs-pull-`"
      },
      "smPull": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Change the order of grid columns to the left\n\nfor Small devices Tablets\n\nclass-prefix `col-sm-pull-`"
      },
      "mdPull": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Change the order of grid columns to the left\n\nfor Medium devices Desktops\n\nclass-prefix `col-md-pull-`"
      },
      "lgPull": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Change the order of grid columns to the left\n\nfor Large devices Desktops\n\nclass-prefix `col-lg-pull-`"
      }
    }
  },
  "../src/Collapse.js": {
    "description": "",
    "methods": [
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "elem",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEntering",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "elem",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEntered",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "elem",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "elem",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExiting",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "elem",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_dimension",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "_getScrollDimensionValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "elem",
            "type": null
          },
          {
            "name": "dimension",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show the component; triggers the expand or collapse animation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mountOnEnter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM)",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "unmountOnExit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Unmount the component (remove it from the DOM) when it is collapsed",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "transitionAppear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Run the expand animation when the component mounts, if it is initially\nshown",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "timeout": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Duration of the collapse animation in milliseconds, to ensure that\nfinishing callbacks are fired even if the original browser transition end\nevents are canceled",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the component expands"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the component starts to expand"
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the component has expanded"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the component collapses"
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the component starts to collapse"
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the component has collapsed"
      },
      "dimension": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "'height'",
                  "computed": false
                },
                {
                  "value": "'width'",
                  "computed": false
                }
              ]
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "The dimension used when collapsing, or a function that returns the\ndimension\n\n_Note: Bootstrap only partially supports 'width'!\nYou will need to supply your own CSS animation for the `.width` CSS class._",
        "defaultValue": {
          "value": "'height'",
          "computed": false
        }
      },
      "getDimensionValue": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that returns the height or width of the animating DOM node\n\nAllows for providing some custom logic for how much the Collapse component\nshould animate in its specified dimension. Called with the current\ndimension prop value and the DOM node.",
        "defaultValue": {
          "value": "function getDimensionValue(dimension, elem) {\n  let value = elem[`offset${capitalize(dimension)}`];\n  let margins = MARGINS[dimension];\n\n  return (value +\n    parseInt(css(elem, margins[0]), 10) +\n    parseInt(css(elem, margins[1]), 10)\n  );\n}",
          "computed": false
        }
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ARIA role of collapsible element"
      }
    }
  },
  "../src/ControlLabel.js": {
    "description": "",
    "methods": [],
    "props": {
      "htmlFor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Uses `controlId` from `<FormGroup>` if not explicitly specified."
      },
      "srOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "../src/DropdownButton.js": {
    "description": "",
    "methods": [],
    "props": {
      "bsStyle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "bsSize": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": ""
      },
      "noCaret": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "@private"
      }
    },
    "composes": [
      "./Dropdown"
    ]
  },
  "../src/DropdownMenu.js": {
    "description": "",
    "methods": [
      {
        "name": "handleRootClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getItemsAndActiveIndex",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getFocusableMenuItems",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "focusNext",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "focusPrevious",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "pullRight": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "labelledBy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "rootCloseEvent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'click'",
              "computed": false
            },
            {
              "value": "'mousedown'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "bsRole": {
        "defaultValue": {
          "value": "'menu'",
          "computed": false
        }
      }
    }
  },
  "../src/DropdownToggle.js": {
    "description": "",
    "methods": [],
    "props": {
      "noCaret": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "useAnchor": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "bsRole": {
        "defaultValue": {
          "value": "'toggle'",
          "computed": false
        }
      }
    }
  },
  "../src/Fade.js": {
    "description": "",
    "methods": [],
    "props": {
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show the component; triggers the fade in or fade out animation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mountOnEnter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Wait until the first \"enter\" transition to mount the component (add it to the DOM)",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "unmountOnExit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Unmount the component (remove it from the DOM) when it is faded out",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "transitionAppear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Run the fade in animation when the component mounts, if it is initially\nshown",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "timeout": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Duration of the fade animation in milliseconds, to ensure that finishing\ncallbacks are fired even if the original browser transition end events are\ncanceled",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the component fades in"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the component starts to fade in"
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the has component faded in"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the component fades out"
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the component starts to fade out"
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the component has faded out"
      }
    }
  },
  "../src/Form.js": {
    "description": "",
    "methods": [],
    "props": {
      "horizontal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'form'",
          "computed": false
        }
      }
    }
  },
  "../src/FormControl.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'input'",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Only relevant if `componentClass` is `'input'`."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Uses `controlId` from `<FormGroup>` if not explicitly specified."
      },
      "inputRef": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Attaches a ref to the `<input>` element. Only functions can be used here.\n\n```js\n<FormControl inputRef={ref => { this.input = ref; }} />\n```"
      }
    }
  },
  "../src/FormControlFeedback.js": {
    "description": "",
    "methods": [
      {
        "name": "getGlyph",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "validationState",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderDefaultFeedback",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "formGroup",
            "type": null
          },
          {
            "name": "className",
            "type": null
          },
          {
            "name": "classes",
            "type": null
          },
          {
            "name": "elementProps",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "bsRole": {
        "defaultValue": {
          "value": "'feedback'",
          "computed": false
        }
      }
    }
  },
  "../src/FormControlStatic.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'p'",
          "computed": false
        }
      }
    }
  },
  "../src/FormGroup.js": {
    "description": "",
    "methods": [
      {
        "name": "hasFeedback",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "children",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "controlId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Sets `id` on `<FormControl>` and `htmlFor` on `<FormGroup.Label>`."
      },
      "validationState": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "null",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/Glyphicon.js": {
    "description": "",
    "methods": [],
    "props": {
      "glyph": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "An icon name without \"glyphicon-\" prefix. See e.g. http://getbootstrap.com/components/#glyphicons"
      }
    }
  },
  "../src/Grid.js": {
    "description": "",
    "methods": [],
    "props": {
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Turn any fixed-width grid layout into a full-width layout by this property.\n\nAdds `container-fluid` class.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "You can use a custom element for this component",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "../src/HelpBlock.js": {
    "description": "",
    "methods": []
  },
  "../src/Image.js": {
    "description": "",
    "methods": [],
    "props": {
      "responsive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets image as responsive image",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rounded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets image shape as rounded",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "circle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets image shape as circle",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "thumbnail": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets image shape as thumbnail",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "../src/InputGroup.js": {
    "description": "",
    "methods": []
  },
  "../src/InputGroupAddon.js": {
    "description": "",
    "methods": []
  },
  "../src/InputGroupButton.js": {
    "description": "",
    "methods": []
  },
  "../src/Jumbotron.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "../src/Label.js": {
    "description": "",
    "methods": [
      {
        "name": "hasContent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "children",
            "type": null
          }
        ],
        "returns": null
      }
    ]
  },
  "../src/ListGroup.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "You can use a custom element type for this component.\n\nIf not specified, it will be treated as `'li'` if every child is a\nnon-actionable `<ListGroupItem>`, and `'div'` otherwise."
      }
    }
  },
  "../src/ListGroupItem.js": {
    "description": "",
    "methods": [
      {
        "name": "renderHeader",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "header",
            "type": null
          },
          {
            "name": "headingClassName",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "active": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      },
      "disabled": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      },
      "header": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "listItem": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/Media.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "../src/MediaBody.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "../src/MediaHeading.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'h4'",
          "computed": false
        }
      }
    }
  },
  "../src/MediaLeft.js": {
    "description": "",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'middle'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Align the media to the top, middle, or bottom of the media object."
      }
    }
  },
  "../src/MediaList.js": {
    "description": "",
    "methods": []
  },
  "../src/MediaListItem.js": {
    "description": "",
    "methods": []
  },
  "../src/MediaRight.js": {
    "description": "",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'middle'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Align the media to the top, middle, or bottom of the media object."
      }
    }
  },
  "../src/MenuItem.js": {
    "description": "",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Highlight the menu item as active."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the menu item, making it unselectable.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "divider": {
        "type": {
          "name": "custom",
          "raw": "all(\n  PropTypes.bool,\n  ({ divider, children }) => (\n    divider && children ?\n      new Error('Children will not be rendered for dividers') :\n      null\n  ),\n)"
        },
        "required": false,
        "description": "Styles the menu item as a horizontal rule, providing visual separation between\ngroups of menu items.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "eventKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Value passed to the `onSelect` handler, useful for identifying the selected menu item."
      },
      "header": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Styles the menu item as a header label, useful for describing a group of menu items.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML `href` attribute corresponding to `a.href`."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the menu item is clicked."
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the menu item is selected.\n\n```js\n(eventKey: any, event: Object) => any\n```"
      }
    }
  },
  "../src/Modal.js": {
    "description": "",
    "methods": [
      {
        "name": "handleEntering",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleExited",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleWindowResize",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDialogClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "updateStyle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "backdrop": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'static'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Include a backdrop component. Specify 'static' for a backdrop that doesn't\ntrigger an \"onHide\" when clicked."
      },
      "keyboard": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Close the modal when escape key is pressed"
      },
      "animation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Open and close the Modal with a slide and fade animation.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "dialogComponentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "A Component type that provides the modal content Markup. This is a useful\nprop when you want to use your own styles and markup to create a custom\nmodal component.",
        "defaultValue": {
          "value": "ModalDialog",
          "computed": true
        }
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When `true` The modal will automatically shift focus to itself when it\nopens, and replace it to the last focused element when it closes.\nGenerally this should never be set to false as it makes the Modal less\naccessible to assistive technologies, like screen-readers."
      },
      "enforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When `true` The modal will prevent focus from leaving the Modal while\nopen. Consider leaving the default value here, as it is necessary to make\nthe Modal work well with assistive technologies, such as screen readers."
      },
      "restoreFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When `true` The modal will restore focus to previously focused element once\nmodal is hidden"
      },
      "show": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When `true` The modal will show itself."
      },
      "onHide": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback fired when the header closeButton or non-static backdrop is\nclicked. Required if either are specified."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the Modal transitions in"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired as the Modal begins to transition in"
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the Modal finishes transitioning in"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired right before the Modal transitions out"
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired as the Modal begins to transition out"
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the Modal finishes transitioning out"
      },
      "container": {
        "type": {
          "name": "custom",
          "raw": "BaseModal.propTypes.container"
        },
        "required": false,
        "description": "@private"
      }
    },
    "composes": [
      "react-overlays/lib/Modal",
      "./ModalDialog"
    ]
  },
  "../src/ModalBody.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "../src/ModalDialog.js": {
    "description": "",
    "methods": [],
    "props": {
      "dialogClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A css class to apply to the Modal dialog DOM node."
      }
    }
  },
  "../src/ModalFooter.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "../src/ModalHeader.js": {
    "description": "",
    "methods": [],
    "props": {
      "closeLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provides an accessible label for the close\nbutton. It is used for Assistive Technology when the label text is not\nreadable.",
        "defaultValue": {
          "value": "'Close'",
          "computed": false
        }
      },
      "closeButton": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the Component should contain a close button",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onHide": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A Callback fired when the close button is clicked. If used directly inside\na Modal component, the onHide will automatically be propagated up to the\nparent Modal `onHide`."
      }
    }
  },
  "../src/ModalTitle.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'h4'",
          "computed": false
        }
      }
    }
  },
  "../src/Nav.js": {
    "description": "",
    "methods": [
      {
        "name": "handleTabKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "onSelect",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getNextActiveChild",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "offset",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "ReactElement"
          }
        }
      },
      {
        "name": "getActiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isActive",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ props }",
            "type": null
          },
          {
            "name": "activeKey",
            "type": null
          },
          {
            "name": "activeHref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getTabProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "child",
            "type": null
          },
          {
            "name": "tabContainer",
            "type": null
          },
          {
            "name": "navRole",
            "type": null
          },
          {
            "name": "active",
            "type": null
          },
          {
            "name": "onSelect",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "activeKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Marks the NavItem with a matching `eventKey` as active. Has a\nhigher precedence over `activeHref`."
      },
      "activeHref": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Marks the child NavItem with a matching `href` prop as active."
      },
      "stacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "NavItems are be positioned vertically.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "justified": {
        "type": {
          "name": "custom",
          "raw": "all(\n  PropTypes.bool,\n  ({ justified, navbar }) => (\n    justified && navbar ?\n      Error('justified navbar `Nav`s are not supported') : null\n  )\n)"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback fired when a NavItem is selected.\n\n```js\nfunction (\n\tAny eventKey,\n\tSyntheticEvent event?\n)\n```"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ARIA role for the Nav, in the context of a TabContainer, the default will\nbe set to \"tablist\", but can be overridden by the Nav when set explicitly.\n\nWhen the role is set to \"tablist\" NavItem focus is managed according to\nthe ARIA authoring practices for tabs:\nhttps://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#tabpanel"
      },
      "navbar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply styling an alignment for use in a Navbar. This prop will be set\nautomatically when the Nav is used inside a Navbar."
      },
      "pullRight": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Float the Nav to the right. When `navbar` is `true` the appropriate\ncontextual classes are added as well.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "pullLeft": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Float the Nav to the left. When `navbar` is `true` the appropriate\ncontextual classes are added as well.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "composes": [
      "./NavItem"
    ]
  },
  "../src/NavDropdown.js": {
    "description": "",
    "methods": [
      {
        "name": "isActive",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ props }",
            "type": null
          },
          {
            "name": "activeKey",
            "type": null
          },
          {
            "name": "activeHref",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "title": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": ""
      },
      "noCaret": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "@private"
      }
    },
    "composes": [
      "./Dropdown"
    ]
  },
  "../src/NavItem.js": {
    "description": "",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "eventKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/NavbarBrand.js": {
    "description": "",
    "methods": []
  },
  "../src/NavbarCollapse.js": {
    "description": "",
    "methods": []
  },
  "../src/NavbarHeader.js": {
    "description": "",
    "methods": []
  },
  "../src/NavbarToggle.js": {
    "description": "",
    "methods": [],
    "props": {
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The toggle content, if left empty it will render the default toggle (seen above)."
      }
    }
  },
  "../src/Overlay.js": {
    "description": "",
    "methods": [],
    "props": {
      "show": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the visibility of the Overlay",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rootClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Specify whether the overlay should trigger onHide when the user clicks outside the overlay",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onHide": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback invoked by the overlay when it wishes to be hidden. Required if\n`rootClose` is specified."
      },
      "animation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "custom",
              "raw": "elementType"
            }
          ]
        },
        "required": false,
        "description": "Use animation",
        "defaultValue": {
          "value": "Fade",
          "computed": true
        }
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the Overlay transitions in"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired as the Overlay begins to transition in"
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the Overlay finishes transitioning in"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired right before the Overlay transitions out"
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired as the Overlay begins to transition out"
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired after the Overlay finishes transitioning out"
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the direction of the Overlay.",
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      }
    },
    "composes": [
      "react-overlays/lib/Overlay"
    ]
  },
  "../src/OverlayTrigger.js": {
    "description": "",
    "methods": [
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDelayedShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDelayedHide",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleMouseOverOut",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "handler",
            "type": null
          },
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleHide",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "show",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "hide",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "makeOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "overlay",
            "type": null
          },
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "trigger": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "custom",
              "raw": "triggerType"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "custom",
                "raw": "triggerType"
              }
            }
          ]
        },
        "required": false,
        "description": "Specify which action or actions trigger Overlay visibility",
        "defaultValue": {
          "value": "['hover', 'focus']",
          "computed": false
        }
      },
      "delay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A millisecond delay amount to show and hide the Overlay once triggered"
      },
      "delayShow": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A millisecond delay amount before showing the Overlay once triggered."
      },
      "delayHide": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A millisecond delay amount before hiding the Overlay once triggered."
      },
      "defaultOverlayShown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The initial visibility state of the Overlay. For more nuanced visibility\ncontrol, consider using the Overlay component directly.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overlay": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "An element or text to overlay next to the target."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@private"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@private"
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@private"
      },
      "onMouseOut": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@private"
      },
      "onMouseOver": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@private"
      },
      "target": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "null",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@private"
      },
      "onHide": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "null",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@private"
      },
      "show": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "null",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@private"
      }
    },
    "composes": [
      "./Overlay"
    ]
  },
  "../src/PageHeader.js": {
    "description": "",
    "methods": []
  },
  "../src/Pager.js": {
    "description": "",
    "methods": [],
    "props": {
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/PagerItem.js": {
    "description": "",
    "methods": [
      {
        "name": "handleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "previous": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "next": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "eventKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/Pagination.js": {
    "description": "",
    "methods": [
      {
        "name": "renderPageButtons",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "activePage",
            "type": null
          },
          {
            "name": "items",
            "type": null
          },
          {
            "name": "maxButtons",
            "type": null
          },
          {
            "name": "boundaryLinks",
            "type": null
          },
          {
            "name": "ellipsis",
            "type": null
          },
          {
            "name": "buttonProps",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "activePage": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "items": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "maxButtons": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "boundaryLinks": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When `true`, will display the first and the last button page when\ndisplaying ellipsis.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "ellipsis": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "When `true`, will display the default node value ('&hellip;').\nOtherwise, will display provided node (when specified).",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "first": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "When `true`, will display the default node value ('&laquo;').\nOtherwise, will display provided node (when specified).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "last": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "When `true`, will display the default node value ('&raquo;').\nOtherwise, will display provided node (when specified).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "prev": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "When `true`, will display the default node value ('&lsaquo;').\nOtherwise, will display provided node (when specified).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "next": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "When `true`, will display the default node value ('&rsaquo;').\nOtherwise, will display provided node (when specified).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "buttonComponentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "You can use a custom element for the buttons"
      }
    }
  },
  "../src/PaginationButton.js": {
    "description": "",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "SafeAnchor",
          "computed": true
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "eventKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/Panel.js": {
    "description": "",
    "methods": [
      {
        "name": "handleClickTitle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderHeader",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "collapsible",
            "type": null
          },
          {
            "name": "header",
            "type": null
          },
          {
            "name": "id",
            "type": null
          },
          {
            "name": "role",
            "type": null
          },
          {
            "name": "expanded",
            "type": null
          },
          {
            "name": "bsProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderAnchor",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "header",
            "type": null
          },
          {
            "name": "id",
            "type": null
          },
          {
            "name": "role",
            "type": null
          },
          {
            "name": "expanded",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderCollapsibleBody",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          },
          {
            "name": "expanded",
            "type": null
          },
          {
            "name": "role",
            "type": null
          },
          {
            "name": "children",
            "type": null
          },
          {
            "name": "bsProps",
            "type": null
          },
          {
            "name": "animationHooks",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderBody",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rawChildren",
            "type": null
          },
          {
            "name": "bsProps",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "collapsible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "header": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "id": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "footer": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "defaultExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "eventKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      },
      "headerRole": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "panelRole": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/PanelGroup.js": {
    "description": "",
    "methods": [
      {
        "name": "handleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          },
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "accordion": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "activeKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      },
      "defaultActiveKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/Popover.js": {
    "description": "",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.string, PropTypes.number,\n]))"
        },
        "required": false,
        "description": "An html id attribute, necessary for accessibility\n@type {string}\n@required"
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the direction the Popover is positioned towards.",
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      },
      "positionTop": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The \"top\" position value for the Popover."
      },
      "positionLeft": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The \"left\" position value for the Popover."
      },
      "arrowOffsetTop": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The \"top\" position value for the Popover arrow."
      },
      "arrowOffsetLeft": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The \"left\" position value for the Popover arrow."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Title content"
      }
    }
  },
  "../src/ProgressBar.js": {
    "description": "",
    "methods": [
      {
        "name": "renderProgressBar",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{\n  min, now, max, label, srOnly, striped, active, className, style, ...props\n}",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "now": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "srOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "onlyProgressBar"
        },
        "required": false,
        "description": ""
      },
      "isChild": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@private",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "../src/Radio.js": {
    "description": "",
    "methods": [],
    "props": {
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "validationState": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "null",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Only valid if `inline` is not set."
      },
      "inputRef": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Attaches a ref to the `<input>` element. Only functions can be used here.\n\n```js\n<Radio inputRef={ref => { this.input = ref; }} />\n```"
      }
    }
  },
  "../src/ResponsiveEmbed.js": {
    "description": "",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "This component requires a single child element"
      },
      "a16by9": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "16by9 aspect ratio",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "a4by3": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "4by3 aspect ratio",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "../src/Row.js": {
    "description": "",
    "methods": [],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "../src/SafeAnchor.js": {
    "description": "There are situations due to browser quirks or Bootstrap CSS where\nan anchor tag is needed, when semantically a button tag is the\nbetter choice. SafeAnchor ensures that when an anchor is used like a\nbutton its accessible. It also emulates input `disabled` behavior for\nlinks, which is usually desirable for Buttons, NavItems, MenuItems, etc.",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "this is sort of silly but needed for Button",
        "defaultValue": {
          "value": "'a'",
          "computed": false
        }
      }
    }
  },
  "../src/SplitButton.js": {
    "description": "",
    "methods": [],
    "props": {
      "bsStyle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "bsSize": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the split button."
      },
      "toggleLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Accessible label for the toggle; the value of `title` if not specified."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "@private"
      }
    },
    "composes": [
      "./Dropdown"
    ]
  },
  "../src/SplitToggle.js": {
    "description": "",
    "methods": []
  },
  "../src/Tab.js": {
    "description": "",
    "methods": [],
    "props": {
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "tabClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "tabClassName is used as className for the associated NavItem"
      }
    },
    "composes": [
      "./TabPane"
    ]
  },
  "../src/TabContent.js": {
    "description": "",
    "methods": [
      {
        "name": "handlePaneEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "child",
            "type": null
          },
          {
            "name": "childKey",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePaneExited",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "child",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getContainerActiveKey",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "componentClass": {
        "type": {
          "name": "custom",
          "raw": "elementType"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "animation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "custom",
              "raw": "elementType"
            }
          ]
        },
        "required": false,
        "description": "Sets a default animation strategy for all children `<TabPane>`s. Use\n`false` to disable, `true` to enable the default `<Fade>` animation or any\n`<Transition>` component.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "mountOnEnter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Wait until the first \"enter\" transition to mount tabs (add them to the DOM)",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "unmountOnExit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Unmount tabs (remove it from the DOM) when they are no longer visible",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "../src/TabPane.js": {
    "description": "",
    "methods": [
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleExited",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getAnimation",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isActive",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "shouldBeIn",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "eventKey": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Uniquely identify the `<TabPane>` among its siblings."
      },
      "animation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "custom",
              "raw": "elementType"
            }
          ]
        },
        "required": false,
        "description": "Use animation when showing or hiding `<TabPane>`s. Use `false` to disable,\n`true` to enable the default `<Fade>` animation or any `<Transition>`\ncomponent."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@private *"
      },
      "aria-labelledby": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@private *"
      },
      "bsClass": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "If not explicitly specified and rendered in the context of a\n`<TabContent>`, the `bsClass` of the `<TabContent>` suffixed by `-pane`.\nIf otherwise not explicitly specified, `tab-pane`."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Transition onEnter callback when animation is not `false`"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Transition onEntering callback when animation is not `false`"
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Transition onEntered callback when animation is not `false`"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Transition onExit callback when animation is not `false`"
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Transition onExiting callback when animation is not `false`"
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Transition onExited callback when animation is not `false`"
      },
      "mountOnEnter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Wait until the first \"enter\" transition to mount the tab (add it to the DOM)"
      },
      "unmountOnExit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Unmount the tab (remove it from the DOM) when it is no longer visible"
      }
    }
  },
  "../src/Table.js": {
    "description": "",
    "methods": [],
    "props": {
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "bordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "condensed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "responsive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "../src/Thumbnail.js": {
    "description": "",
    "methods": [],
    "props": {
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "../src/Tooltip.js": {
    "description": "",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "isRequiredForA11y(PropTypes.oneOfType([\n  PropTypes.string, PropTypes.number,\n]))"
        },
        "required": false,
        "description": "An html id attribute, necessary for accessibility\n@type {string|number}\n@required"
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the direction the Tooltip is positioned towards.",
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      },
      "positionTop": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The \"top\" position value for the Tooltip."
      },
      "positionLeft": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The \"left\" position value for the Tooltip."
      },
      "arrowOffsetTop": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The \"top\" position value for the Tooltip arrow."
      },
      "arrowOffsetLeft": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The \"left\" position value for the Tooltip arrow."
      }
    }
  },
  "../src/Well.js": {
    "description": "",
    "methods": []
  }
}
